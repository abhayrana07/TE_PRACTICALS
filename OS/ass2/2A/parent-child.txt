#include<stdio.h>
#include<sys/wait.h>
#include<unistd.h>
#include<stdlib.h>

void bubble(int arr[],int n){
    int i,j,temp;
    for (i=0;i<n;i++){
        for (int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                temp = arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
        printf("\nSorted Array in Assecending Order.\n");
    for(int k=0;k<n;k++){
        printf("%d - ",arr[k]);
    }
printf("\n");
}
void bubbler(int arr[],int n){
    int i,j,temp;
    for (i=0;i<n;i++){
        for (int j=0;j<n-i-1;j++){
            if(arr[j]<arr[j+1]){
                temp = arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
        printf("\nSorted Array in Decending Order.\n");
    for(int k=0;k<n;k++){
        printf("%d - ",arr[k]);
    }
printf("\n");
}

int main(){
    int n;
    printf("Enter the number of elements\n");
    scanf("%d",&n);

    int arr[n];
    printf("Enter the Array elements:");
    for (int i = 0; i < n; i++)
    {
        scanf("%d",&arr[i]);
    }

    pid_t p = fork();

    if (p==0){
        printf("\nEntering in child process : %d",getpid());
        printf("\nChilds Parent Process has pid :%d",getppid());
        printf("\nSorting In Acessinding order :");
        bubble(arr,n);

        system("ps -el | grep init");

    }
    else if(p>1){
        printf("\nEntering in Parent process : %d",getpid());
        int id =0;
        id = wait(NULL);
        printf("\n\nChilds terminated wit pid:%d",id);
        printf("\nSorting In Decending o rder :");
        bubbler(arr,n);

        system("ps -el | grep z");
    }
    
    
}