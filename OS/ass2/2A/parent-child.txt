#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

#define MAX 30

void insertion_sort(int arr[], int n)
{
    int i, key, j;
    for(i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;
        while(j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

void bubble_sort(int arr[], int n)
{
    int i, j, temp;
    for(i = 0; i < n - 1; i++)
    {
        for(j = 0; j < n - i - 1; j++)
        {
            if(arr[j] > arr[j + 1])
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void print(int arr[], int n)
{
    for(int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main()
{
    int n, arr[MAX], pid;

    printf("\nEnter the number of elements you want in the array: ");
    scanf("%d", &n);

    printf("Enter the array elements: ");
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    pid = fork();

    if(pid == 0)
    {
        printf("\n***** Child Process *****\n");
        printf("Child process PID: %d\n", getpid());
        printf("Parent process PID: %d\n", getppid());
        insertion_sort(arr, n);
        printf("Sorted array from Child Process (Insertion Sort): ");
        print(arr, n);
    }
    else if(pid > 0)
    {
        printf("\n***** Parent Process *****\n");
        printf("Parent process PID: %d\n", getpid());
        wait(NULL);
        printf("Child Process terminated\n");
        bubble_sort(arr, n);
        printf("Sorted array from Parent Process (Bubble Sort): ");
        print(arr, n);
    }
    else
    {
        printf("\nERROR IN FORK!!\n");
    }

    return 0;
}
