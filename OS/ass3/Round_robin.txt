#include <stdio.h>
#include <limits.h>

#define MAX 10

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_burst_time;
    int waiting;
    int turnaround;
    int completed;
    int completion_time;
} Process;

void sjf_preemptive(Process p[], int n) {
    int time = 0, completed = 0;

    while (completed < n) {
        int shortest = -1, min_burst_time = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival_time <= time && !p[i].completed && p[i].remaining_burst_time < min_burst_time) {
                min_burst_time = p[i].remaining_burst_time;
                shortest = i;
            }
        }

        if (shortest == -1) {
            time++;
            continue;
        }

        p[shortest].remaining_burst_time--;
        time++;

        if (p[shortest].remaining_burst_time == 0) {
            p[shortest].completed = 1;
            completed++;
            p[shortest].completion_time = time;
            p[shortest].turnaround = p[shortest].completion_time - p[shortest].arrival_time;
            p[shortest].waiting = p[shortest].turnaround - p[shortest].burst_time;
        }
    }

    printf("\nSJF Preemptive Scheduling:\n");
    printf("PID\tarrival_time\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%-4d\t%-6d\t%-5d\t%-10d\t%-10d\t%-7d\n", p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].completion_time, p[i].turnaround, p[i].waiting);
    }
}

void round_robin(Process p[], int n, int time_quantum) {
    int time = 0, completed = 0;

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (p[i].arrival_time <= time && p[i].remaining_burst_time > 0) {
                int exec_time = (p[i].remaining_burst_time < time_quantum) ? p[i].remaining_burst_time : time_quantum;
                p[i].remaining_burst_time -= exec_time;
                time += exec_time;

                if (p[i].remaining_burst_time == 0) {
                    p[i].completed = 1;
                    completed++;
                    p[i].completion_time = time;
                    p[i].turnaround = p[i].completion_time - p[i].arrival_time;
                    p[i].waiting = p[i].turnaround - p[i].burst_time;
                }
            }
        }
    }

    printf("\nRound Robin Scheduling:\n");
    printf("PID   Arrival   Burst   Completion   Turnaround   Waiting\n");
    for (int i = 0; i < n; i++) {
        printf("%-5d %-9d %-7d %-12d %-12d %-9d\n", 
            p[i].pid, 
            p[i].arrival_time, 
            p[i].burst_time, 
            p[i].completion_time, 
            p[i].turnaround, 
            p[i].waiting);
    }

}

int main() {
    int n, time_quantum;
    Process p[MAX];

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter the time quantum for Round Robin: ");
    scanf("%d", &time_quantum);

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival_time and burst time for P%d: ", p[i].pid);
        scanf("%d%d", &p[i].arrival_time, &p[i].burst_time);
        p[i].remaining_burst_time = p[i].burst_time;
        p[i].completed = 0;
    }

    sjf_preemptive(p, n);

    for (int i = 0; i < n; i++) {
        p[i].remaining_burst_time = p[i].burst_time;
        p[i].completed = 0;
    }

    round_robin(p, n, time_quantum);

    return 0;
}
