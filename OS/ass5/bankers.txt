#include <stdio.h>

int max[10][10], alloc[10][10], need[10][10];
int avail[10];  
int np, nr;

void readmatrix(int matrix[10][10]) {
    int i, j;
    for (i = 0; i < np; i++)
        for (j = 0; j < nr; j++)
            scanf("%d", &matrix[i][j]);
}

void displaymatrix(int matrix[10][10]) {
    int i, j;
    for (i = 0; i < np; i++) {
        printf("\nP%d: ", i);  
        for (j = 0; j < nr; j++) {
            printf("%d ", matrix[i][j]);
        }
    }
    printf("\n"); 
}

void cal_need() {
    int i, j;
    for (i = 0; i < np; i++) {
        for (j = 0; j < nr; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
}

void banker() {
    int i, j, k = 0, flag;
    int finish[10], safe_seq[10];

    for (i = 0; i < np; i++) {
        finish[i] = 0; // Initialize finish array
    }

    while (k < np) {
        flag = 1; // Reset flag for each iteration
        for (i = 0; i < np; i++) {
            if (finish[i] == 0) { // Process not finished
                flag = 0; // Reset flag
                // Check if need can be satisfied by available
                for (j = 0; j < nr; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = 1; // Not enough resources
                        break;
                    }
                }

                if (flag == 0) { // Process can proceed
                    finish[i] = 1; // Mark as finished
                    safe_seq[k] = i; // Store safe sequence
                    k++;
                    // Release resources
                    for (j = 0; j < nr; j++) {
                        avail[j] += alloc[i][j]; 
                    }
                }
            }
        }
    }

    // Check if all processes finished
    flag = 0;
    for (i = 0; i < np; i++) {
        if (finish[i] == 0) {
            printf("The System Is In Deadlock\n");
            flag = 1; // Deadlock found
            break;
        }
    }

    if (flag == 0) {
        printf("The System is in Safe state.\nSafe Sequence is: ");
        for (i = 0; i < np; i++) {
            printf("P%d ", safe_seq[i]);
        }
        printf("\n");
    }
}

int main() {
    int j;

    printf("ENTER NO OF PROCESSES: ");
    scanf("%d", &np);
    printf("ENTER NO OF RESOURCES: ");
    scanf("%d", &nr);
    printf("ENTER ALLOCATION MATRIX:\n");
    readmatrix(alloc);
    printf("ENTER REQUIREMENT MATRIX:\n");
    readmatrix(max);
    printf("ENTER AVAILABLE RESOURCES:\n");
    for (j = 0; j < nr; j++) {
        scanf("%d", &avail[j]); // Read into the 1D array
    }

    printf("\nINITIAL ALLOCATION:\n");
    displaymatrix(alloc);
    printf("\nMAXIMUM REQUIREMENT:\n");
    displaymatrix(max);
    printf("\nAVAILABLE RESOURCES:\n");
    for (j = 0; j < nr; j++) {
        printf("%d ", avail[j]);
    }
    printf("\n");

    cal_need();
    printf("\nNEED MATRIX:\n");
    displaymatrix(need);

    banker();
    printf("\n");
    return 0;
}
