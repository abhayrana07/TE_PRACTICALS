#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

int sharedData = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t writeLock = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t readCountMutex = PTHREAD_MUTEX_INITIALIZER;

int readCount = 0;

void *reader(void *arg) {
    pthread_mutex_lock(&readCountMutex);
    readCount++;
    if (readCount == 1) {
        pthread_mutex_lock(&writeLock);
    }
    pthread_mutex_unlock(&readCountMutex);

    pthread_mutex_lock(&mutex);
    printf("Reader %ld: Read sharedData = %d\n", (long)arg, sharedData);
    pthread_mutex_unlock(&mutex);

    pthread_mutex_lock(&readCountMutex);
    readCount--;
    if (readCount == 0) {
        pthread_mutex_unlock(&writeLock);
    }
    pthread_mutex_unlock(&readCountMutex);

    return NULL;
}

void *writer(void *arg) {
    pthread_mutex_lock(&writeLock);

    pthread_mutex_lock(&mutex);
    sharedData++;
    printf("Writer %ld: Write sharedData = %d\n", (long)arg, sharedData);
    pthread_mutex_unlock(&mutex);

    pthread_mutex_unlock(&writeLock);

    return NULL;
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];

    for (long i = 0; i < NUM_READERS; i++) {
        pthread_create(&readers[i], NULL, reader, (void *)i);
    }

    for (long i = 0; i < NUM_WRITERS; i++) {
        pthread_create(&writers[i], NULL, writer, (void *)i);
    }

    for (long i = 0; i < NUM_READERS; i++) {
        pthread_join(readers[i], NULL);
    }
    for (long i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writers[i], NULL);
    }

    return 0;
}
