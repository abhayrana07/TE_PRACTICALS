#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>

void fifo(int page[],int n ,int framesize);
void optimal(int page[],int n ,int framesize);
void lru(int page[], int n , int framesize);

int main()
{
    int n;
    printf("Enter the number of pages :-");
    scanf("%d",&n);

    int page[n];
    int framesize;
    int choice;

    printf("\nEnter the pages :-");
    for (int i=0;i<n;i++){
        scanf("%d",&page[i]);
    }

    printf("\nEnter the FrameSize :-");
    scanf("%d",&framesize);

    while (1)
    {
        printf("\n");
        printf("\n");
        printf("Select a choice::\n");
        printf("1.FIFO.\n");
        printf("2.LRU.\n");
        printf("3.Optimal.\n");
        printf("\n");
        printf("Select a option:");
        scanf("%d",&choice);
        switch (choice)
        {
        case 1:
            fifo(page,n,framesize);
            break;

        case 2:
            lru(page,n,framesize);
            break;

        case 3:
            optimal(page,n,framesize);
            break;

        default:
            exit(0);
            break;
        }

    }
    
    return 0;
}

void fifo(int page[],int n,int framesize){
    int frame[framesize];
    int faults =0; 
    int front=0,rear=0;//rear = traversal upto 3 ; front = in frame traversal

    for (int i=0;i<framesize;i++) frame[i] = -1;
    printf("\nPage\tFrames\tPage Fault\n");
    printf("\n");
    for (int i = 0; i < n; i++)
    {
        int found =0;

        for(int j=0;j<rear;j++){//check hit
            if (frame[j] == page[i]){
                found = 1;
                break;
            }
        }

        if (found == 0 ){
            faults++;
            if(rear<framesize){
                frame[rear] = page[i];
                rear++;
            }else{
                frame[front] = page[i];
                front = (front+1)%framesize;
            }

            printf("%d->\t",page[i]);
            for(int k=0;k<rear;k++){
                printf("%d  ",frame[k]);
            }
            printf("\t[F]\n");
            
        }else{
            printf("%d->\t",page[i]);
            for(int k=0;k<rear;k++){
                printf("%d  ",frame[k]);
            }
            printf("\t[H]\n");
        }
    }
    printf("no. of faluts = %d",faults);
}

void lru(int page[],int n,int framesize){
    int faults =0;
    int rear=0;
    int frame[framesize];
    int recent[framesize];
    for (int i=0;i<framesize;i++) frame[i] = -1;
    printf("\nPage\tFrames\tPage Fault\n");
    printf("\n");
    for (int i=0;i<n;i++){
        int found =0;
        int min_index =0;

            for (int j =0;j<rear;j++){
                if (frame[j] == page[i]){
                    found=1;
                    recent[j] = i;
                    break;
                }
            }

            if(found == 0){
                faults ++;
                if (rear<framesize){
                    frame[rear] =page[i];
                    recent[rear] = i;
                    rear++;
                }else{
                    for(int k=0;k<framesize;k++){
                        if (recent[k]<recent[min_index]){
                            min_index = k;
                        }
                    }
                    frame[min_index] = page[i];
                    recent[min_index]=i;
                }
                printf("%d->\t",page[i]);
                for(int k =0;k<rear ;k++){
                    printf("%d  ",frame[k]);
                }
                printf("\t[F]\n");
            }else{
                printf("%d->\t",page[i]);
                for(int k =0;k<rear ;k++){
                    printf("%d  ",frame[k]);
                }
                printf("\t[H]\n");
            }

    }
    printf("\nTotal page faults => %d.\n",faults);
}

void optimal(int page[],int n,int framesize){
    int faults =0;
    int frame[framesize];
    int rear=0;

    for (int i=0;i<framesize;i++) frame[i] = -1;

    printf("\nPage\tFrames\tPage Fault\n");
    printf("\n");
    for(int i=0;i<n;i++){
        int found=0;
        int min_index=0;

        for(int j=0;j<rear;j++){
            if(frame[j] == page[i]){
                found =1;
                break;
            }
        }

        if (found==0){
            faults++;
            if(rear<framesize){
                frame[rear]=page[i];
                rear++;
            }else{
                int far=i;
                int replace;
                for(int j=0;j<rear;j++){
                    for(int k =i+1;k<n;k++){
                        if(frame[j]==page[k]) break;
                        if(k>far){
                        far=k;
                        replace=j;
                        }
                    }
                }
                frame[replace] = page[i];
            }
            printf("%d->",page[i]);
            for(int k=0;k<rear;k++){
                printf("%d  ",frame[k]);
            }
            printf("\t[F]\n");
        }else{
            printf("%d->",page[i]);
            for(int k=0;k<rear;k++){
                printf("%d  ",frame[k]);
            }
            printf("\t[F]\n");
        }
    }
    printf("Total number of Faults :%d.",faults);
}