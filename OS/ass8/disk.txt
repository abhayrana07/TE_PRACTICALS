#include<stdio.h>
#include<stdlib.h>

#define max_c 200


void sstf(int req[],int size,int initial_head) {
    int visited[size]; 
    int total_head_movement = 0;
    int current_head = initial_head;


 for(int i=0;i<size;i++)
     visited[i]=0;

    printf("SSTF\n");
    for(int i=0;i<size;i++){
    int min_dist = max_c;
    int index = -1;  //to store index of xlosest request


    for(int j=0;j<size;j++){

        if(!visited[j]){
            int dist=abs(req[j] - current_head);
            if(dist < min_dist){
                min_dist=dist;
                index = j;
            }
        }
    }

    visited[index] = 1; //marks as visited
    printf("%d\n",req[index]);
    total_head_movement= total_head_movement+ min_dist;
    current_head = req[index];
}
printf("total head movement(sstf):%d\n",total_head_movement);
}




void scan(int req[], int size, int initial_head) {
    int total_head_movement = 0;
    int current_head = initial_head;

    // Sort requests in ascending order
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (req[j] > req[j + 1]) {
                int temp = req[j];
                req[j] = req[j + 1];
                req[j + 1] = temp;
            }
        }
    }

    printf("SCAN Seek Sequence:\n");

    // Find the first request greater than or equal to the initial head position
    int i;
    for (i = 0; i < size; i++) {
        if (req[i] >= current_head) {
            break;
        }
    }

    // Move right (higher cylinder numbers) and service all requests on the right
    for (int j = i; j < size; j++) {
        printf("%d\n", req[j]);
        total_head_movement += abs(current_head - req[j]);
        current_head = req[j];
    }

    // Move to the maximum cylinder (right end)
    if (current_head < max_c - 1) {
        total_head_movement += abs(current_head - (max_c - 1));
        current_head = max_c - 1;
        printf("%d\n", current_head);
    }

    // Move left (lower cylinder numbers) and service any remaining requests
    for (int j = i - 1; j >= 0; j--) {
        printf("%d\n", req[j]);
        total_head_movement += abs(current_head - req[j]);
        current_head = req[j];
    }

    printf("Total Head Movement (SCAN): %d\n", total_head_movement);
}




void c_look(int requests[], int size, int initial_head) {
    int total_head_movement = 0;  // Total head movement
    int current_head = initial_head;  // Set initial head position

    // Sort requests in ascending order
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (requests[j] > requests[j + 1]) {
                // Swap requests[j] and requests[j + 1]
                int temp = requests[j];
                requests[j] = requests[j + 1];
                requests[j + 1] = temp;
            }
        }
    }

    printf("C-LOOK Seek Sequence: ");

    // Find the first request that is greater than or equal to the current head
    int i;
    for (i = 0; i < size; i++) {
        if (requests[i] >= current_head) {
            break;  // Exit the loop when we find the first request >= current_head
        }
    }

    // Move to the right (higher cylinder numbers)
    for (int j = i; j < size; j++) {
        printf("%d ", requests[j]);
        total_head_movement += abs(current_head - requests[j]);
        current_head = requests[j];
    }

    // Jump back to the lowest request
    if (i > 0) {
        // Move to the first request if it exists
        total_head_movement += abs(current_head - requests[0]);
        current_head = requests[0]; // Jump back to the first request
        printf("%d ", current_head); // Print the jump position

        // Move to the left (lower cylinder numbers)
        for (int j = 0; j < i; j++) {
            printf("%d ", requests[j]);
            total_head_movement += abs(current_head - requests[j]);
            current_head = requests[j];
        }
    }

    printf("\nTotal Head Movement (C-LOOK): %d\n", total_head_movement);
}

int main() {
    int size, initial_head;

    // Take input for number of requests
    printf("Enter the number of requests: ");
    scanf("%d", &size);

    int requests[size];  // Array to store requests

    // Take input for each request
    printf("Enter the request sequence:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &requests[i]);
    }

    // Take input for initial head position
    printf("Enter the initial head position: ");
    scanf("%d", &initial_head);

    // Call the scheduling algorithms
    sstf(requests, size, initial_head);
    scan(requests, size, initial_head);
    c_look(requests, size, initial_head);

    return 0;
}